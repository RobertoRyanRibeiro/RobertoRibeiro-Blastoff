using Blog.Models;
using Microsoft.Data.SqlClient;
using System;
using Dapper.Contrib.Extensions;
using Blog.Repositories;

namespace Blog
{
    class Program
    {
        private const string CONNECTION_STRING = @"Server=localhost,1433;Database=Blog;TrustServerCertificate=True;User ID=sa;Password = 1q2w3e4r@#$";
        
        static void Main(String[] args)
        {
            var connection = new SqlConnection(CONNECTION_STRING);
            connection.Open();

       
            ReadUsers(connection);
            ReadRoles(connection);
            ReadTags(connection);
       
            connection.Close();
        }

        static void ReadUsers(SqlConnection connection)
        {
            var repository = new Repository<User>(connection);
            var items = repository.GetAll();

            foreach (var item in items)
                Console.WriteLine(item.Name);
        } 
        
        static void ReadRoles(SqlConnection connection)
        {
            var repository = new Repository<Role>(connection);
            var items = repository.GetAll();
            foreach (var item in items)
                Console.WriteLine(item.Name);
        }  
        
        static void ReadTags(SqlConnection connection)
        {
            var repository = new Repository<Tag>(connection);
            var items = repository.GetAll();
            foreach (var item in items)
                Console.WriteLine(item.Name);
        }
    }
}

//Repository

using Dapper.Contrib.Extensions;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Blog.Repositories
{
    public class Repository<TModel> where TModel : class
    {
        private readonly SqlConnection _connection;

        public Repository(SqlConnection connection)
            => _connection = connection;

        public IEnumerable<TModel> GetAll()
            => _connection.GetAll<TModel>();

        public TModel Get(int id)
            => _connection.Get<TModel>(id);

        public void Create(TModel model)
            => _connection.Insert<TModel>(model);
        

        public void Update(TModel model)
            => _connection.Update<TModel>(model);


        public void Delete(TModel model)
            => _connection.Delete<TModel>(model);


        public void Delete(int id)
        {
            var model = Get(id);
            _connection.Delete<TModel>(model);
        }

    }
}
