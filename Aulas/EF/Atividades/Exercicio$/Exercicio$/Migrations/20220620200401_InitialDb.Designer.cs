// <auto-generated />
using System;
using Atividade4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exercicio_.Migrations
{
    [DbContext(typeof(Atividade4DbContext))]
    [Migration("20220620200401_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Atividade4.Model.Cliente", b =>
                {
                    b.Property<string>("Cpf")
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("Nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("Telefone");

                    b.HasKey("Cpf");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Atividade4.Model.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cliente_Cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("Cliente_Cpf");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Data_Compra");

                    b.Property<int>("Produto_Id")
                        .HasColumnType("INT")
                        .HasColumnName("Produto_Id");

                    b.Property<int>("Quant")
                        .HasColumnType("INT")
                        .HasColumnName("Quant");

                    b.Property<int>("Tax")
                        .HasColumnType("INT")
                        .HasColumnName("Tax");

                    b.HasKey("Id");

                    b.HasIndex("Cliente_Cpf");

                    b.HasIndex("Produto_Id");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("Atividade4.Model.Produto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("Nome");

                    b.Property<double>("Preco")
                        .HasColumnType("float")
                        .HasColumnName("Preco");

                    b.Property<int>("Quant")
                        .HasColumnType("INT")
                        .HasColumnName("Quant");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("Tipo");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Atividade4.Model.Compra", b =>
                {
                    b.HasOne("Atividade4.Model.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("Cliente_Cpf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Atividade4.Model.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("Produto_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
